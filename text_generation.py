# -*- coding: utf-8 -*-
"""Text_Generation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EyNl8yHL8APmPNlfKGALE8NfmWI8G7_I

# Goal:--  
**Given a sequence of character data, train a model that can predict the nect character  
 in the sequence **
"""

##necessary imports :
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

##enabline eager execution
tf.enable_eager_execution()

##Getting the data
path_to_file = tf.keras.utils.get_file('shakespeare.txt', 'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt')

##reading the file
text = open(path_to_file).read()

##getting the lenght of the corpus
len(text)

"""## Text Preprocessing"""

##Take the unique words form the text file --> this will be used in building the vocabulary.
vocab = sorted(set(text))
print("length of the unique words in the vocab is {}".format(len(vocab)))

##Before model building we need to map the string in to a numerical representaion

##mapping words to an unique id
char2id = {u:i for i,u in enumerate(vocab)}

##mapping an unique id to each word
id2word = np.array(vocab)

##input
text2input = np.array([char2id[c] for c in text])

##validating the above operations
print('{}--> characters mapped to int -->{}'.format(repr(text[:16]),text2input[:16]))

seq_length = 100
examples_per_epoch = len(text)//seq_length

##creating training examples and targets
char_df = tf.data.Dataset.from_tensor_slices(text2input)

##validating
for i in char_df.take(5):
  print(id2word[i.numpy()])

sequences = char_df.batch(seq_length+1,drop_remainder = True)

def input_target(text_data):
  input_text = text_data[:-1]
  target_text = text_data[1:]
  return input_text,target_text

df = sequences.map(input_target)

##validating
for ip_ex,target_ex in df.take(1):
  print("input data  is -->",repr(''.join(id2word[ip_ex.numpy()])))
  print("target data is -->",repr(''.join(id2word[target_ex.numpy()])))

##creating the training batch
BATCH_SIZE = 64
steps_per_epoch = examples_per_epoch//BATCH_SIZE
BUFFER_SIZE = 10000
df = df.shuffle(BUFFER_SIZE).batch(BATCH_SIZE,drop_remainder = True)

##model building

##hyperparametrs
vocab_size = len(vocab)
embedding_dim = 256
rnn_units = 1024

##as colab has GPU instance so cuDNNGPU is used.
def build_model(vocab_size,embedding_dim,rnn_units,batch_size):
  model = tf.keras.Sequential()
  model.add(tf.keras.layers.Embedding(vocab_size,embedding_dim,batch_input_shape = [batch_size,None]))
  model.add(tf.keras.layers.CuDNNGRU(rnn_units,return_sequences=True, 
          recurrent_initializer='glorot_uniform',
          stateful=True))
  '''model.add(tf.keras.layers.CuDNNGRU(rnn_units,return_sequences=True, 
          recurrent_initializer='glorot_uniform',
          stateful=True))'''
  model.add(tf.keras.layers.Dense(vocab_size))
  
  return model

model = build_model(vocab_size = vocab_size,
                   embedding_dim = embedding_dim,
                   rnn_units = rnn_units,
                   batch_size = BATCH_SIZE)

model.summary()

def loss(labels, logits):
  return tf.keras.losses.sparse_categorical_crossentropy(labels, logits)
model.compile(
    optimizer = tf.train.AdamOptimizer(),
    loss = loss)

# Directory where the checkpoints will be saved
import os
checkpoint_dir = './training_checkpoints'
# Name of the checkpoint files
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")

checkpoint_callback=tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_prefix,
    save_weights_only=True)

EPOCHS = 3
history = model.fit(df.repeat(), epochs=EPOCHS, steps_per_epoch=steps_per_epoch, callbacks=[checkpoint_callback])

##generating the text
cp = tf.train.latest_checkpoint(checkpoint_dir)
model = build_model(vocab_size,embedding_dim,rnn_units,batch_size =1 )
model.load_weights(cp)
model.build(tf.TensorShape([1,None]))
model.summary()

def generate_text(model, start_string):
  # Evaluation step (generating text using the learned model)

  # Number of characters to generate
  num_generate = 1000

  # You can change the start string to experiment
  start_string = 'ROMEO'

  # Converting our start string to numbers (vectorizing) 
  input_eval = [char2id[s] for s in start_string]
  input_eval = tf.expand_dims(input_eval, 0)

  # Empty string to store our results
  text_generated = []

  # Low temperatures results in more predictable text.
  # Higher temperatures results in more surprising text.
  # Experiment to find the best setting.
  temperature = 1.0

  # Here batch size == 1
  model.reset_states()
  for i in range(num_generate):
      predictions = model(input_eval)
      # remove the batch dimension
      predictions = tf.squeeze(predictions, 0)

      # using a multinomial distribution to predict the word returned by the model
      predictions = predictions / temperature
      predicted_id = tf.multinomial(predictions, num_samples=1)[-1,0].numpy()
      
      # We pass the predicted word as the next input to the model
      # along with the previous hidden state
      input_eval = tf.expand_dims([predicted_id], 0)
      
      text_generated.append(id2word[predicted_id])

  return (start_string + ''.join(text_generated))
print(generate_text(model, start_string="ROMEO: "))